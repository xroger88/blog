#+TITLE: JS interop in clojurescript
#+tags: clojurescript javascript interop

ggg

* references
- https://lwhorton.github.io/2018/10/20/clojurescript-interop-with-javascript.html

* clojurescript access to js object
- dot-form access to properties and functions of js object
  for property, (.-someProperty js-obj)
  for function, (.someFn js-obj)
- using goog.object/get and goog.object/set
  (goog.object/get .-someProperty o)
  (goog.object/set .-someProperty o someValue)
- using native array access, aget/aset
  (aget o "someProperty")
  (aset o "someProperty" someValue)

* closure compilor optimization causing dot-form access symbol renamed (shorten)
- this problem makes a lot of issues in production level ...
- two ways to work around
  1) extern inference in clojurescript compilor (shadow.cljs does this way)
  2) wrapper libraries to access the object's properties and functions by using string based array indexing.
     note that string is not optimizied by compilor, only symbols are optimizied.
     - aget/aset or goog.object/{get,set}
     - cljs.oops
     - applied-science/js-interop

* cljs.oops

* applied-science/js-interop
- see https://github.com/applied-science/js-interop
