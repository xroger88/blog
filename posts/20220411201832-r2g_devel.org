#+title: r2g-devel
#+tags: r2g dev

ggg

* Overview
This is a note for r2g application development.

* Dev Setup

** Guix/Linux

Ubuntu Linux installed as a virtual machine with Parallel Desktop (Host: MacOS)
Guix/Linux Package Manager installed

** Java

Install openjdk with Guix, need to install whole JDK things including Java Docs.
Guix openjdk package output extension should be :jdk, not :out (default).

#+begin_src sh

    guix install openjdk:jdk
    java --version # openjdk 17.0.1

#+end_src

** Clojure

Install clojure language environment which is based on Java Runtime.
Therefore, you need to make sure that Java runtime is installed on system.
Ensure that the following dependencies are installed: *bash*, *curl*, *rlwrap*, and *Java*.

#+begin_src sh

  curl -O https://download.clojure.org/install/linux-install-1.11.0.1100.sh
  chmod +x linux-install-1.11.0.1100.sh
  sudo ./linux-install-1.11.0.1100.sh

  clj --version # Clojure CLI version 1.10.3.1087

#+end_src

** Babashka (CLI tool)

#+begin_src sh

  bash < <(curl -s https://raw.githubusercontent.com/babashka/babashka/master/install)
  ls | bb -i '(filter #(-> % io/file .isDirectory) *input*)'

#+end_src

** Polylith (CLI tool)

R2G project uses polylith tool to organize the modules of clojure codes.
This is not mandatory but useful in developing r2g applications.
See - https://polylith.gitbook.io/poly

In deps.edn, add the following alias:
{
...
 :aliases   {:poly  {:extra-deps {polylith/clj-poly
                                  {:mvn/version "0.2.13-alpha"}}
                     :main-opts  ["-m" "polylith.clj.core.poly-cli.core"]}}
...
}
Then, run *clj -M:poly help*

** Nodejs & shadow-cljs
 nodejs seems not suppored by Guix as of now.
 Install nodejs and npm with apt tool, then install shadow-cljs with npm.

#+begin_src sh

  guix install node
  node --version # v10.19.0
  sudo apt install npm
  npm --version # 6.14.4

  # package.json file may specify the version of shadow-cljs e.g. ^2.15.9
  npm install shadow-cljs
  # go to a project directory contains shadow-cljs.edn
  npx shadow-cljs --help

#+end_src

** Chromium & Fulcro Inspect extension

You may need to install chromium browser if not installed.
Also the fulcro inspect chromium extension is required to be installed in chromium browser if you consider the developmemt of r2g application.

#+begin_src sh

  sudo apt install chromium

#+end_src

* R2G Project Setup

** Source Repo

#+begin_src sh

  # make a project directory
  mkdir -p ~/dev
  cd ~/dev
  git clone git@github.com:xroger88/r2g.git
  # make r2g.fulcro directory that contains soem repos forked from fulcro project
  mkdir r2g.fulcro
  cd r2g.fulcro
  git clone git@github.com:xroger88/fulcro-rad.git
  git clone git@github.com:xroger88/fulcro-rad-datomic.git
  git clone git@github.com:xroger88/fulcro-rad-semantic-ui.git
  # go to r2g main project
  cd ~/dev/r2g

#+end_src

** Server Build & Run

First, you need to set up maven repository ~/.m2
Datomic-pro maven package requires addtional settings for maven.

~/.m2/settings.xml file created as:

<!-- ~/.m2/settings.xml (see the Maven server settings docs) -->
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
 <servers>
   <server>
     <id>my.datomic.com</id>
     <username>xroger88@gmail.com</username>
     <password>8c559429-b5b1-459f-91f8-9c2c3cc69819</password>
   </server>
 </servers>
</settings>

#+begin_src sh

    bb shadow-bootstrap-release # build bootstrap for self-hosting cljs
    bb shadow-watch # starting nrepl server and watch :app

#+end_src

** Client Run & Test

Need to run datomic database first.
goto datomic-pro directory and run *run-transactor* in other terminal.
*Note* - In order to properly run datomic db, you need to set up Java 8 environment. Install adoptopenjdk 8 version manually and set JAVA_HOME in run-transactor shell script.
Then, datomic db started with port 4334.

#+begin_src sh

  # connect a repl to shadow-cljs nrepl server (port: 8777)
  clj -M:nrepl-connect

#+end_src

#+begin_src emacs-lisp

    (require 'r2g.app.core)
    ;; starting r2g backend (http server port: 4000)
    ;; see the integrant config file located in resources/config.edn
    (r2g.app.core/reset)

#+end_src

After running r2g backend system, then open browser with http://localhost:4000

** Emacs & Cider
Using cider-connect (C-c M-c), the r2g server can be connected with cider-nrepl.
The default is localhost:8777.
I prefer runing the server externally with shadow-cljs: $bb shadow-watch

In case that you'are using exwm (emacs window manager), you can launch a browser by keying M-&.

* SQL database migration guide for r2g testing

** SQL Server and SQL Sample Database
- SQL Server
  - Install Docker from docker.com
  - Install MSSQL 2019 docker image like below in Terminal
    docker run -d --name sql_server_2019 -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=reallyStrongPwd123' -p 1433:1433 mcr.microsoft.com/mssql/server:2019-latest
- Download Azure Data Studio from https://docs.microsoft.com/ko-kr/sql/azure-data-studio/download-azure-data-studio?view=sql-server-ver15 then connect sql_server_2019 with sa/reallyStrongPwd123 for localhost,1433
- SQL Sample Database
  - download bikestores sample database from https://www.sqlservertutorial.net/sql-server-sample-database/
  - In azure data studio,
    - first craete database named 'BikeStores'
    - second, open 'bs_create_objects.sql' in bikestores zip and run it
    - finally open 'bs_load_data.sql' in bikestores zip and run it
** Postgresql and Sample Database
* Code Examples

#+begin_src clojure :results value

  (+ 1 2)
  (def a 1)

#+end_src

#+RESULTS:
|        3 |
| #'user/a |

* Trubleshooting
** Class loading problems happen sometimes when you run r2g
- (reset) execution brings up an class loading error for jdk.incubator.foreign.MemoryAddress from dtype-next module. I didn't figured out the reason exactly but I guess some loading time causes this. Once you got this error, next time you try it then no error. It means some class loading takes some time, later you try on and okay. However, this loading problem will be fixed later at the stage of production.
- FIXED: this problem casused by dtype-next and libpython-clj, some version mismatch. the problem had gone after removing dtype-next in deps.edn.

* Todo-List
** DONE finalized setting up exwm environment for r2g application development
CLOSED: [2022-04-13 Wed 11:36]
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-04-13 Wed 11:36]
:END:

** DONE Decoupling configuration and system state mgmt
- As-is implemtation uses Integrant for config & state mgmt.
- Better to decouple it into one for config and the other for state mgmt.
- JUXT's Aero libraty is good for configuration purpose.
  https://github.com/juxt/aero
- Integrant related code can be simplified through the decoupling.

** TODO What's next goals for r2g? need to define the dev. milestones
- self-hosting cljs based webapp
  + core.async not self-hosted, need it for self-hosting fulcro 3.x
  + web clients interacting with severless infra (e.g. google api or amazon api)
- simple web-cli for system management (for example, guix package management)
- self-organized webapp
  + add code-cells making a part of page
  + design a page based on the composition of code cells
  + page management (add, remove, modify)
  + no-code, visual programming ???
